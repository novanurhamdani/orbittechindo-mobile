import AsyncStorage from "@react-native-async-storage/async-storage";
import { MOCK_USER, TOKEN_EXPIRY, TOKEN_KEY } from "../constants/auth";
import { LoginCredentials, RegisterData, User } from "../types/user";

// Generate a mock JWT token
export const generateToken = (user: User): string => {
  const payload = {
    id: user.id,
    email: user.email,
    exp: Date.now() + TOKEN_EXPIRY,
  };

  // In a real app, we would use a proper JWT library
  // This is just a mock implementation
  return btoa(JSON.stringify(payload));
};

// Save token to AsyncStorage
export const saveToken = async (token: string): Promise<void> => {
  try {
    await AsyncStorage.setItem(TOKEN_KEY, token);
  } catch (error) {
    console.error("Error saving token:", error);
  }
};

// Get token from AsyncStorage
export const getToken = async (): Promise<string | null> => {
  try {
    return await AsyncStorage.getItem(TOKEN_KEY);
  } catch (error) {
    console.error("Error getting token:", error);
    return null;
  }
};

// Remove token from AsyncStorage
export const removeToken = async (): Promise<void> => {
  try {
    await AsyncStorage.removeItem(TOKEN_KEY);
  } catch (error) {
    console.error("Error removing token:", error);
  }
};

// Mock login function
export const login = async (
  credentials: LoginCredentials
): Promise<{ user: User; token: string } | null> => {
  // In a real app, this would make an API call
  if (
    credentials.email === MOCK_USER.email &&
    credentials.password === MOCK_USER.password
  ) {
    const { password, ...user } = MOCK_USER;
    const token = generateToken(user);
    await saveToken(token);
    return { user, token };
  }
  return null;
};

// Mock register function
export const register = async (
  data: RegisterData
): Promise<{ user: User; token: string }> => {
  // In a real app, this would make an API call
  const user: User = {
    id: "2", // In a real app, this would be generated by the backend
    name: data.name,
    email: data.email,
    phoneNumber: data.phoneNumber,
  };

  const token = generateToken(user);
  await saveToken(token);
  return { user, token };
};

// Mock logout function
export const logout = async (): Promise<void> => {
  await removeToken();
};
